
Перем Кэш;

Функция Main()
	
	ИдентификаторГруппы = ПолучитьИдентификаторГруппы();
	
	ВывестиВЛог(СтрШаблон(
			"group-id: %1"
			, ИдентификаторГруппы
		));
	
	
	ВывестиВЛог("Сбор структуры данных группы...");
	
	СтруктураДанных = ПолучитьСтруктуруДанных(ИдентификаторГруппы);
	
	ВывестиВЛог("Сбор структуры данных группы... Готово");
	
	
	ВывестиВЛог("Преобразование в JSON...");
	
	СтрокаJSON = ЗашифроватьJson(СтруктураДанных);
	
	ЗаписатьСтрокуВФайл(
		ТекущийКаталог() + "\" + ПолучитьИмяФайлаДанных(".json"),
		СтрокаJSON
	);
	
	ВывестиВЛог("Преобразование в JSON... Готово");
	
	
	ВывестиВЛог("Преобразование в YAML...");
	
	СтрокаYAML = ЗашифроватьYAML(СтруктураДанных);
	
	ЗаписатьСтрокуВФайл(
		ТекущийКаталог() + "\" + ПолучитьИмяФайлаДанных(".yaml"),
		СтрокаYAML
	);
	
	ЗаписатьСтрокуВФайл(
		ТекущийКаталог() + "\" + ПолучитьИмяФайлаХэша(),
		ПолучитьХеш_CRC32(СтрокаYAML)
	);
	
	ВывестиВЛог(СтрШаблон(
			"YAML:
			|%1"
			, СтрокаYAML
		));
	
	ВывестиВЛог("Преобразование в YAML... Готово");
	
КонецФункции

Функция ПолучитьСтруктуруДанных(Знач ИдентификаторГруппы)
	
	КоллекцияГрупп = Новый Соответствие;
	КоллекцияГрупп[ИдентификаторГруппы] = НоваяСтруктураГруппы(ИдентификаторГруппы);
	
	ОчередьГрупп = Новый Массив;
	ОчередьГрупп.Добавить(ИдентификаторГруппы);
	
	Пока ОчередьГрупп.Количество() > 0 Цикл
		
		ИдентификаторГруппы = ОчередьГрупп[0];
		
		ОчередьГрупп.Удалить(0);
		
		Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
					"groups/" + ИдентификаторГруппы + "/subgroups?per_page=100"
				));
		
		Массив = Новый Массив;
		
		Для Каждого Элемент Из Информация Цикл
			Группа = НоваяСтруктураГруппы(Элемент.id);
			КоллекцияГрупп[Элемент.id] = Группа;
			КоллекцияГрупп[ИдентификаторГруппы].subgroups.Добавить(Группа);
			ОчередьГрупп.Добавить(Элемент.id);
		КонецЦикла;
		
	КонецЦикла;
	
	КоллекцияПроектов = Новый Соответствие;
	
	Для Каждого ЭлементСоответствия Из КоллекцияГрупп Цикл
		
		Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
					"groups/" + ЭлементСоответствия.Ключ
				));
		
		ЭлементСоответствия.Значение.name = Информация.name;
		
		Для Каждого Элемент Из Информация.projects Цикл
			Проект = НоваяСтруктураПроекта(Элемент.id, Элемент.name);
			ЭлементСоответствия.Значение.projects.Добавить(Проект);
			КоллекцияПроектов[Элемент.id] = Проект;
		КонецЦикла;
		
	КонецЦикла;
	
	УровниДоступа = Новый Соответствие;
	УровниДоступа[50] = "Owner (50)";
	УровниДоступа[40] = "Maintainer (40)";
	УровниДоступа[30] = "Developer (30)";
	УровниДоступа[20] = "Reporter (20)";
	УровниДоступа[10] = "Guest (10)";
	
	Для Каждого ЭлементСоответствия Из КоллекцияГрупп Цикл
		
		Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
					"groups/" + ЭлементСоответствия.Ключ + "/members?per_page=100"
				));
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Элемент");
		Таблица.Колонки.Добавить("username");
		Таблица.Колонки.Добавить("access_level");
		
		Для Каждого Элемент Из Информация Цикл
			
			СтрокаТаблицы = Таблица.Добавить();
			
			СтрокаТаблицы.username = Элемент.username;
			СтрокаТаблицы.access_level = Элемент.access_level;
			
		КонецЦикла;
		
		Таблица.Сортировать("access_level УБЫВ");
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			// ЭлементСоответствия.Значение.members.Добавить(Элемент);
			ЭлементСоответствия.Значение.members[СтрокаТаблицы.username] = УровниДоступа[СтрокаТаблицы.access_level];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементСоответствия Из КоллекцияПроектов Цикл
		
		Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
					"projects/" + ЭлементСоответствия.Ключ + "/members?per_page=100"
				));
		
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Элемент");
		Таблица.Колонки.Добавить("username");
		Таблица.Колонки.Добавить("access_level");
		
		Для Каждого Элемент Из Информация Цикл
			
			СтрокаТаблицы = Таблица.Добавить();
			
			СтрокаТаблицы.username = Элемент.username;
			СтрокаТаблицы.access_level = Элемент.access_level;
			
		КонецЦикла;
		
		Таблица.Сортировать("access_level УБЫВ");
		
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			ЭлементСоответствия.Значение.members[СтрокаТаблицы.username] = УровниДоступа[СтрокаТаблицы.access_level];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоллекцияГрупп[ПолучитьИдентификаторГруппы()];
	
КонецФункции

Функция НоваяСтруктураГруппы(id, name = "")
	
	Структура = Новый Структура("
			|id,
			|name,
			|members,
			|projects,
			|subgroups,
			|");
	
	Структура.id = id;
	Структура.name = name;
	Структура.members = Новый Соответствие;
	Структура.projects = Новый Массив;
	Структура.subgroups = Новый Массив;
	
	Возврат Структура;
	
КонецФункции

Функция НоваяСтруктураПроекта(id, name = "")
	
	Структура = Новый Структура("
			|id,
			|name,
			|members,
			|");
	
	Структура.id = id;
	Структура.name = name;
	Структура.members = Новый Соответствие;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьЗначение(Ключ)
	
	Значение = Раскэшировать(Ключ);
	
	Если Значение = Неопределено Тогда
		
		Значение = ПолучитьАргументКоманднойСтроки("-" + Ключ);
		
		Если Значение = Неопределено Тогда
			
			Значение = ПолучитьЗначениеИзФайла(ТекущийКаталог() + "\" + Ключ);
			
		КонецЕсли;
		
		Закэшировать(Ключ, Значение);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьАргументКоманднойСтроки(Ключ)
	
	Индекс = АргументыКоманднойСтроки.Найти(Ключ);
	
	Если Индекс = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АргументыКоманднойСтроки.ВГраница() <= Индекс Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АргументыКоманднойСтроки[Индекс + 1];
	
КонецФункции

Функция ПолучитьЗначениеИзФайла(ПолноеИмяФайла)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеТекста(ПолноеИмяФайла);
	
	Значение = Чтение.Прочитать();
	
	Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ЗаписатьСтрокуВФайл(ПолноеИмяФайла, Строка)
	
	Запись = Новый ЗаписьТекста(ПолноеИмяФайла);
	
	Запись.Записать(Строка);
	
	Запись.Закрыть();
	
КонецФункции
Функция Закэшировать(Ключ, Значение)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Кэш[Ключ] = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Раскэшировать(Ключ)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Возврат Кэш[Ключ];
	
КонецФункции

Функция ВыполнитьЗапрос(Метод, ТекстЗапроса)
	
	URL = "https://gitlab.com/api/v4/" + ТекстЗапроса;
	
	Соединение = Новый HTTPСоединение(URL);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки = Новый Соответствие;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", ПолучитьТокен());
	
	Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	
	ВывестиВЛог(СтрШаблон(
			"
			|%1 /%2
			|-->
			|Код ответа: %3
			|Ответ:
			|%4"
			, Метод
			, ТекстЗапроса
			, Ответ.КодСостояния
			, Ответ.ПолучитьТелоКакСтроку()
		));
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция РасшифроватьJson(СтрокаJson)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJson);
	
	Значение = ПрочитатьJSON(Чтение);
	
	Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ЗашифроватьJson(Значение, ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб);
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьJSON(Запись, Значение);
	
	СтрокаJson = Запись.Закрыть();
	
	Возврат СтрокаJson;
	
КонецФункции

Функция ЗашифроватьYAML(Знач Значение, Знач Отступ = "    ", Знач Уровень = 0, Знач СНовойСтроки = Ложь)
	
	Запись = Новый ТекстовыйДокумент;
	
	Если ТипЗнч(Значение) = Тип("Массив")
		Или ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		
		// Запись.ДобавитьСтроку("");
		
		ТекущийОтступ = "";
		Для й = 1 По Уровень Цикл
			ТекущийОтступ = ТекущийОтступ + Отступ;
		КонецЦикла;
		
		ОтметкаЭлементаМассива = "- " + Сред(Отступ, 3);
		
		Для Каждого Элемент Из Значение Цикл
			
			Запись.ДобавитьСтроку(ТекущийОтступ + ОтметкаЭлементаМассива + ЗашифроватьYAML(Элемент, Отступ, Уровень + 1));
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		Или ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура")
		Или ТипЗнч(Значение) = Тип("Соответствие")
		Или ТипЗнч(Значение) = Тип("ФиксированноеСоответствие") Тогда
		
		ТекущийОтступ = "";
		Для й = 1 По Уровень Цикл
			ТекущийОтступ = ТекущийОтступ + Отступ;
		КонецЦикла;
		
		ПервыйКлюч = Истина;
		
		Для Каждого Элемент Из Значение Цикл
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив")
				Или ТипЗнч(Элемент.Значение) = Тип("Структура")
				Или ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
				Разделитель = ":" + Символы.ПС;
			Иначе
				Разделитель = ": ";
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Ключ) = Тип("Строка") Тогда
				
				Текст = Элемент.Ключ;
				
			Иначе
				
				Текст = "? " + ЗашифроватьYAML(Элемент.Ключ, Отступ, Уровень + 1) + "
					|" + ТекущийОтступ;
				
			КонецЕсли;
			
			Текст = Текст + Разделитель + ЗашифроватьYAML(Элемент.Значение, Отступ, Уровень + 1, Истина);
			
			Если Не ПервыйКлюч Или СНовойСтроки Тогда
				Текст = ТекущийОтступ + Текст;
			КонецЕсли;
			
			Если ПервыйКлюч Тогда
				ПервыйКлюч = Ложь;
			КонецЕсли;
			
			Запись.ДобавитьСтроку(Текст);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Запись.ДобавитьСтроку(СтрЗаменить(Формат(Значение, "ДФ='yyyy-MM-ddTHH:mm:ss'"), "T00:00:00", ""));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Запись.ДобавитьСтроку(Формат(Значение, "ЧРД=.; ЧН=; ЧГ="));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Запись.ДобавитьСтроку(?(Значение = Истина, "true", "false"));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		Запись.ДобавитьСтроку(ЗашифроватьYAML(ТаблицаВМассивСтруктур(Значение), Отступ, Уровень));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Значение);
		
		Если Текст.КоличествоСтрок() > 1 Тогда
			
			Запись.ДобавитьСтроку("|");
			
			ТекущийОтступ = "";
			Для й = 1 По Уровень Цикл
				ТекущийОтступ = ТекущийОтступ + Отступ;
			КонецЦикла;
			
			Для й = 1 По Текст.КоличествоСтрок() Цикл
				Запись.ДобавитьСтроку(ТекущийОтступ + Отступ + Текст.ПолучитьСтроку(й));
			КонецЦикла;
			
		Иначе
			
			Если Значение = "true"
				Или Значение = "false"
				Или ЭтоСтроковоеПредставлениеЧисла(Значение) Тогда
				Запись.ДобавитьСтроку("""" + Значение + """");
			Иначе
				Запись.ДобавитьСтроку(Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запись.ДобавитьСтроку(ЗашифроватьYAML(Строка(Значение)));
		
	КонецЕсли;
	
	СтрокаYAML = Запись.ПолучитьТекст();
	
	Возврат СтрокаYAML;
	
КонецФункции

Функция ТаблицаВМассивСтруктур(Знач Таблица)
	
	Массив = Новый Массив;
	
	КлючиСтруктуры = Новый Массив;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		КлючиСтруктуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	КлючиСтруктуры = СтрСоединить(КЛючиСтруктуры, ",");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Структура = Новый Структура(КлючиСтруктуры);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы);
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоСтроковоеПредставлениеЧисла(Знач Строка)
	
	Попытка
		Число = Число(Строка);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьХеш_CRC32(СтрокаYAML)
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	
	Хеширование.Добавить(СтрокаYAML);
	
	Возврат Хеширование.ХешСуммаСтрокой;
	
КонецФункции

Функция ПолучитьИдентификаторГруппы()
	
	Значение = ПолучитьЗначение("group-id");
	
	Если Значение <> Неопределено Тогда
		Возврат Число(Значение);
	КонецЕсли;
	
	Значение = ПолучитьЗначениеИзФайла(ПолучитьЗначение("group-id-file"));
	
	ВывестиВЛог(Значение);
	
	Если Значение <> Неопределено Тогда
		Возврат Число(Значение);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТокен()
	
	Значение = ПолучитьЗначение("private-token");
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьИмяФайлаДанных(Знач Расширение)
	
	Если Лев(Расширение, 1) <> "." Тогда
		Расширение = "." + Расширение;
	КонецЕсли;
	
	Значение = ПолучитьЗначение("data-file");
	
	Если Значение <> Неопределено Тогда
		Возврат Значение + Расширение;
	КонецЕсли;
	
	Значение = "data" + ПолучитьИдентификаторГруппы() + Расширение;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьИмяФайлаХэша()
	
	Значение = ПолучитьЗначение("hash-file");
	
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Значение = "hash" + ПолучитьИдентификаторГруппы();
	
	Возврат Значение;
	
КонецФункции

Функция ВывестиВЛог(Знач ТекстСообщения)
	
	ФайлЛога = ПолучитьЗначение("log");
	
	Если ЗначениеЗаполнено(ФайлЛога) Тогда
		
		Запись = Новый ЗаписьТекста(ФайлЛога, , , Истина);
		Запись.ЗаписатьСтроку(ТекстСообщения);
		Запись.Закрыть();
		
	КонецЕсли;
	
	Сообщить(ТекстСообщения);
	
КонецФункции

ВывестиВЛог(СтрШаблон(
		"
		|Начало
		|%1"
		, Формат(ТекущаяДата(), "ДЛФ=DT")
	));

Main();

ВывестиВЛог(СтрШаблон(
		"%1
		|Завершено
		|"
		, Формат(ТекущаяДата(), "ДЛФ=DT")
	));
