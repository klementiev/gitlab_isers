#Использовать yaml

Перем Кэш;

Функция Main()
	
	ИдентификаторГруппы = Число(ПолучитьЗначение("group-id"));
	
	СтрокаYAML = ПолучитьЗначениеИзФайла(
			ТекущийКаталог() + "\" + "data" + ПолучитьЗначение("group-id") + ".yaml"
		);
	
	Если СтрокаYAML = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаYAML = СтрЗаменить(СтрокаYAML, Символы.Таб, ПолучитьЗаменуТабуляции(4));
	
	// Группа = РасшифроватьYAML(СтрокаYAML);
	
	ПроцессорЧтения = Новый ПарсерYaml;
	Группа = ПроцессорЧтения.ПрочитатьYaml(СтрокаYAML);
	
	КоллекцияУровнейДоступа = Новый Соответствие;
	КоллекцияУровнейДоступа["Owner (50)"] = 40;
	КоллекцияУровнейДоступа["Maintainer (40)"] = 40;
	КоллекцияУровнейДоступа["Developer (30)"] = 30;
	КоллекцияУровнейДоступа["Reporter (20)"] = 20;
	КоллекцияУровнейДоступа["Guest (10)"] = 20;
	КоллекцияУровнейДоступа["Owner"] = 40;
	КоллекцияУровнейДоступа["Maintainer"] = 40;
	КоллекцияУровнейДоступа["Developer"] = 30;
	КоллекцияУровнейДоступа["Reporter"] = 20;
	КоллекцияУровнейДоступа["Guest"] = 20;
	КоллекцияУровнейДоступа["50"] = 40;
	КоллекцияУровнейДоступа["40"] = 40;
	КоллекцияУровнейДоступа["30"] = 30;
	КоллекцияУровнейДоступа["20"] = 20;
	КоллекцияУровнейДоступа["10"] = 20;
	КоллекцияУровнейДоступа[50] = 40;
	КоллекцияУровнейДоступа[40] = 40;
	КоллекцияУровнейДоступа[30] = 30;
	КоллекцияУровнейДоступа[20] = 20;
	КоллекцияУровнейДоступа[10] = 20;
	
	УровеньДоступаПоУмолчанию = 30;
	
	КоллекцияГрупп = Новый Соответствие;
	КоллекцияПроектов = Новый Соответствие;
	
	КоллекцияГрупп[Группа] = ПолучитьКоллекциюСотрудников(
			Группа["members"],
			КоллекцияУровнейДоступа,
			УровеньДоступаПоУмолчанию
		);
	
	ОчередьГрупп = Новый Массив;
	ОчередьГрупп.Добавить(Группа);
	
	Пока ОчередьГрупп.Количество() > 0 Цикл
		
		Группа = ОчередьГрупп[0];
		
		ОчередьГрупп.Удалить(0);
		
		Если Группа["subgroups"] <> Неопределено Тогда
			
			Для Каждого Подгруппа Из Группа["subgroups"] Цикл
				
				КоллекцияГрупп[Подгруппа] = ОбъединитьКоллекцииСотрудников(
						ПолучитьКоллекциюСотрудников(
							Подгруппа["members"],
							КоллекцияУровнейДоступа,
							УровеньДоступаПоУмолчанию
						),
						КоллекцияГрупп[Группа]
					);
				
				ОчередьГрупп.Добавить(Подгруппа);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из КоллекцияГрупп Цикл
		
		Если Элемент.Ключ["projects"] <> Неопределено Тогда
			
			Для Каждого Проект Из Элемент.Ключ["projects"] Цикл
				
				КоллекцияПроектов[Проект] = ОбъединитьКоллекцииСотрудников(
						ПолучитьКоллекциюСотрудников(
							Проект["members"],
							КоллекцияУровнейДоступа,
							УровеньДоступаПоУмолчанию
						),
						Элемент.Значение
					);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИдентификаторыСотрудников = Новый Соответствие;
	
	Действия = Новый Структура;
	Действия.Вставить("Удалить", 1);
	Действия.Вставить("Добавить", 2);
	Действия.Вставить("Изменить", 3);
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("id");
	ТаблицаПользователей.Колонки.Добавить("username");
	ТаблицаПользователей.Колонки.Добавить("access_level");
	ТаблицаПользователей.Колонки.Добавить("Действие");
	
	Для Каждого Элемент Из КоллекцияПроектов Цикл
		
		ТаблицаПользователей.Очистить();
		
		Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
					"projects/" + Элемент.Ключ["id"] + "/members?per_page=100"
				));
		
		Пользователи = Новый Соответствие;
		
		Для Каждого ЭлементИнформации Из Информация Цикл
			Пользователи[ЭлементИнформации.username] = ЭлементИнформации.access_level;
			ИдентификаторыСотрудников[ЭлементИнформации.username] = ЭлементИнформации.id;
		КонецЦикла;
		
		Для Каждого Сотрудник Из Элемент.Значение Цикл
			
			Если Пользователи[Сотрудник.Ключ] = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаПользователей.Добавить();
				СтрокаТаблицы.username = Сотрудник.Ключ;
				СтрокаТаблицы.access_level = Сотрудник.Значение;
				СтрокаТаблицы.Действие = Действия.Добавить;
				
			ИначеЕсли Пользователи[Сотрудник.Ключ] <> Сотрудник.Значение Тогда
				
				СтрокаТаблицы = ТаблицаПользователей.Добавить();
				СтрокаТаблицы.username = Сотрудник.Ключ;
				СтрокаТаблицы.access_level = Сотрудник.Значение;
				СтрокаТаблицы.Действие = Действия.Изменить;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Сотрудник Из Пользователи Цикл
			
			Если Элемент.Значение[Сотрудник.Ключ] = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаПользователей.Добавить();
				СтрокаТаблицы.username = Сотрудник.Ключ;
				СтрокаТаблицы.Действие = Действия.Удалить;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПользователей Цикл
			
			СтрокаТаблицы.id = ИдентификаторыСотрудников[СтрокаТаблицы.username];
			
			Если СтрокаТаблицы.id = Неопределено Тогда
				
				Информация = РасшифроватьJson(ВыполнитьЗапрос("Get",
							"users?username=" + СтрокаТаблицы.username
						));
				
				Если ТипЗнч(Информация) = Тип("Массив") И Информация.Количество() > 0 Тогда
					
					СтрокаТаблицы.id = Информация[0].id;
					
					ИдентификаторыСотрудников[СтрокаТаблицы.username] = СтрокаТаблицы.id;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаПользователей Цикл
			
			Если СтрокаТаблицы.id = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Действие = Действия.Удалить Тогда
				
				Информация = РасшифроватьJson(ВыполнитьЗапрос("Del",
							"projects/" + Элемент.Ключ["id"] + "/members/" + СтрокаТаблицы.id
						));
				
			ИначеЕсли СтрокаТаблицы.Действие = Действия.Добавить Тогда
				
				Информация = РасшифроватьJson(ВыполнитьЗапрос("Post",
							"projects/" + Элемент.Ключ["id"] + "/members?user_id=" + СтрокаТаблицы.id + "&access_level=" + СтрокаТаблицы.access_level
						));
				
			ИначеЕсли СтрокаТаблицы.Действие = Действия.Изменить Тогда
				
				Информация = РасшифроватьJson(ВыполнитьЗапрос("Put",
							"projects/" + Элемент.Ключ["id"] + "/members/" + СтрокаТаблицы.id + "?access_level=" + СтрокаТаблицы.access_level
						));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьЗначение(Ключ)
	
	Значение = Раскэшировать(Ключ);
	
	Если Значение = Неопределено Тогда
		
		Значение = ПолучитьАргументКоманднойСтроки("-" + Ключ);
		
		Если Значение = Неопределено Тогда
			
			Значение = ПолучитьЗначениеИзФайла(ТекущийКаталог() + "\" + Ключ);
			
		КонецЕсли;
		
		Закэшировать(Ключ, Значение);
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

Функция ПолучитьАргументКоманднойСтроки(Ключ)
	
	Индекс = АргументыКоманднойСтроки.Найти(Ключ);
	
	Если Индекс = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АргументыКоманднойСтроки.ВГраница() <= Индекс Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АргументыКоманднойСтроки[Индекс + 1];
	
КонецФункции

Функция ПолучитьЗначениеИзФайла(ПолноеИмяФайла)
	
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если Не Файл.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Чтение = Новый ЧтениеТекста(ПолноеИмяФайла);
	
	Значение = Чтение.Прочитать();
	
	Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ЗаписатьСтрокуВФайл(ПолноеИмяФайла, Строка)
	
	Запись = Новый ЗаписьТекста(ПолноеИмяФайла);
	
	Запись.Записать(Строка);
	
	Запись.Закрыть();
	
КонецФункции
Функция Закэшировать(Ключ, Значение)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Кэш[Ключ] = Значение;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция Раскэшировать(Ключ)
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Возврат Кэш[Ключ];
	
КонецФункции

// Функция ВыполнитьЗапросЧерезБиблиотеку(Метод, ТекстЗапроса)
// 	// #Использовать 1connector

// 	URL = "https://gitlab.com/api/v4/" + ТекстЗапроса;

// 	Заголовки = Новый Соответствие;
// 	Заголовки.Вставить("PRIVATE-TOKEN", ПолучитьЗначение("private-token"));

// 	Данные = Новый Структура;

// 	ДополнительныеПараметры = Новый Структура;
// 	ДополнительныеПараметры.Вставить("Данные", Данные);
// 	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);

// 	Результат = КоннекторHTTP.ВызватьМетод(Метод, URL, ДополнительныеПараметры).Текст();

// 	Возврат Результат;

// КонецФункции

Функция ВыполнитьЗапрос(Метод, ТекстЗапроса)
	
	URL = "https://gitlab.com/api/v4/" + ТекстЗапроса;
	
	Соединение = Новый HTTPСоединение(URL, , , , , 100);
	
	Запрос = Новый HTTPЗапрос;
	Запрос.Заголовки = Новый Соответствие;
	Запрос.Заголовки.Вставить("PRIVATE-TOKEN", ПолучитьЗначение("private-token"));
	
	Ответ = Соединение.ВызватьHTTPМетод(Метод, Запрос);
	
	Возврат Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция РасшифроватьJson(СтрокаJson)
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJson);
	
	Значение = ПрочитатьJSON(Чтение);
	
	Чтение.Закрыть();
	
	Возврат Значение;
	
КонецФункции

Функция ЗашифроватьJson(Значение, ПараметрыЗаписи = Неопределено)
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Unix, Символы.Таб);
	КонецЕсли;
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьJSON(Запись, Значение);
	
	СтрокаJson = Запись.Закрыть();
	
	Возврат СтрокаJson;
	
КонецФункции

Функция ПолучитьЗаменуТабуляции(Знач ПробеловВТабуляцииПоУмолчанию = 4)
	
	ПробеловВТабуляции = ПолучитьЗначение("tab-spaces");
	
	Если Не ЗначениеЗаполнено(ПробеловВТабуляции) Тогда
		ПробеловВТабуляции = ПробеловВТабуляцииПоУмолчанию;
	КонецЕсли;
	
	Строка = "";
	
	Для й = 1 По ПробеловВТабуляции Цикл
		Строка = Строка + " ";
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

Функция ПолучитьКоллекциюСотрудников(СписокСотрудников, КоллекцияУровнейДоступа, УровеньДоступаПоУмолчанию)
	
	Соответствие = Новый Соответствие;
	
	Очередь = Новый Массив;
	Очередь.Добавить(СписокСотрудников);
	
	Пока Очередь.Количество() > 0 Цикл
		
		ЭлементОчереди = Очередь[0];
		
		Очередь.Удалить(0);
		
		Если ЭлементОчереди = Неопределено Тогда
			// nothing
		ИначеЕсли ТипЗнч(ЭлементОчереди) = Тип("Массив") Тогда
			
			Для Каждого Элемент Из ЭлементОчереди Цикл
				Очередь.Добавить(Элемент);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(ЭлементОчереди) = Тип("Структура")
			Или ТипЗнч(ЭлементОчереди) = Тип("ФиксированнаяСтруктура")
			Или ТипЗнч(ЭлементОчереди) = Тип("Соответствие")
			Или ТипЗнч(ЭлементОчереди) = Тип("ФиксированноеСоответствие") Тогда
			
			Для Каждого Элемент Из ЭлементОчереди Цикл
				Если КоллекцияУровнейДоступа[Элемент.Значение] <> Неопределено Тогда
					Соответствие[Элемент.Ключ] = КоллекцияУровнейДоступа[Элемент.Значение];
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Соответствие[ЭлементОчереди] = УровеньДоступаПоУмолчанию;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Функция ОбъединитьКоллекцииСотрудников(Коллекция1, Коллекция2)
	
	МассивКоллекций = Новый Массив;
	МассивКоллекций.Добавить(Коллекция1);
	МассивКоллекций.Добавить(Коллекция2);
	
	Объединение = Новый Соответствие;
	
	Для Каждого Коллекция Из МассивКоллекций Цикл
		Для Каждого Элемент Из Коллекция Цикл
			
			Значение = Объединение[Элемент.Ключ];
			
			Если Значение = Неопределено Тогда
				Значение = 0;
			КонецЕсли;

			Если Элемент.Значение Тогда
				
			КонецЕсли;
			
			Объединение[Элемент.Ключ] = Макс(Значение, Элемент.Значение);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Объединение;
	
КонецФункции

Функция РасшифроватьYAML(СтрокаYAML)
	
	Значение = Неопределено;
	
	СтекОтступов = Новый Массив;
	СтекЭлементов = Новый Массив;
	
	СтекОтступов.Добавить(- 1);
	СтекЭлементов.Добавить(Новый Массив);
	
	Чтение = НовоеЧтение(СтрокаYAML);
	
	Пока СледующаяСтрока(Чтение) Цикл
		
		// Строка = ОтброситьКомментарий(ТекущаяСтрока(Чтение));
		
		// Если ПустаяСтрока(Строка) Тогда
		// 	Продолжить;
		// КонецЕсли;
		
		Строка = ТекущаяСтрока(Чтение);
		ТекущийОтступ = ПолучитьОтступ(Строка);
		
		ОчередьЭлементов = Новый Массив;
		
		ОчередьЭлементов.Добавить(Новый Структура("Отступ, Значение"
				, ТекущийОтступ
				, Сред(Строка, ТекущийОтступ + 1)
			));
		
		Пока ОчередьЭлементов.Количество() > 0 Цикл
			
			ЭлементОчереди = ОчередьЭлементов[0];
			
			ОчередьЭлементов.Удалить(0);
			
			Если Лев(Строка, 2) = "- " Тогда
				
				Если СтекОтступов[СтекОтступов.ВГраница()] < ТекущийОтступ Тогда
					
					СтекЭлементов.Добавить(Новый Массив);
					СтекОтступов.Добавить(ТекущийОтступ);
					
				ИначеЕсли СтекОтступов[СтекОтступов.ВГраница()] = ТекущийОтступ Тогда
					
					ОчередьЭлементов.Добавить(СокрЛ(Сред(Строка, 3)));
					
				ИначеЕсли СтекОтступов[СтекОтступов.ВГраница()] > ТекущийОтступ Тогда
				КонецЕсли;
				
			КонецЕсли;
			
			
			
		КонецЦикла;
		
		
		ТекущийОтступ = ПолучитьОтступ(Строка);
		
		Строка = Сред(Строка, ТекущийОтступ + 1);
		
		Если СтекОтступов.Количество() = 0 Тогда
			
			Если Лев(Строка, 2) = "- " Тогда
				СтекОтступов.Добавить(ТекущийОтступ);
				СтекЭлементов.Добавить(Новый Массив);
			ИначеЕсли СтрНайти(Строка, ":") > 0 Тогда
				СтекОтступов.Добавить(ТекущийОтступ);
				СтекЭлементов.Добавить(Новый Структура);
			Иначе
				ВызватьИсключение "Невалидное значение, строка №" + Чтение.Счетчик;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийОтступ = СтекОтступов[СтекОтступов.ВГраница()] Тогда
			
			Если Лев(Строка, 2) = "- " Тогда
				
				// СтекЭлементов[СтекЭлементов.ВГраница()]
				// Строка = Сред(Строка, 3);
				
			КонецЕсли;
			
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

Функция НовоеЧтение(Строка)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Строка);
	
	Структура = Новый Структура;
	Структура.Вставить("Счетчик", 0);
	Структура.Вставить("ТекстовыйДокумент", Текст);
	
	Возврат Структура;
	
КонецФункции

Функция СледующаяСтрока(Чтение)
	
	Чтение.Счетчик = Чтение.Счетчик + 1;
	
	Возврат (Чтение.Счетчик > Чтение.ТекстовыйДокумент.КоличествоСтрок());
	
КонецФункции

Функция ТекущаяСтрока(Чтение)
	
	Возврат Чтение.ТекстовыйДокумент.ПолучитьСтроку(Чтение.Счетчик);
	
КонецФункции

Функция ОтброситьКомментарий(Знач Строка)
	
	Позиция = Найти(Строка, "#");
	
	Если Позиция > 0 Тогда
		Строка = Лев(Строка, Позиция - 1);
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Функция ПолучитьОтступ(Знач Строка)
	
	Позиция = 0;
	
	Пока Позиция <= СтрДлина(Строка)
		И ПустаяСтрока(Сред(Строка, Позиция, 1)) Цикл
		
		Позиция = Позиция + 1;
		
	КонецЦикла;
	
	Возврат Позиция;
	
КонецФункции

Функция ЗашифроватьYAML(Знач Значение, Знач Отступ = "    ", Знач Уровень = 0, Знач СНовойСтроки = Ложь)
	
	Запись = Новый ТекстовыйДокумент;
	
	Если ТипЗнч(Значение) = Тип("Массив")
		Или ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
		
		// Запись.ДобавитьСтроку("");
		
		ТекущийОтступ = "";
		Для й = 1 По Уровень Цикл
			ТекущийОтступ = ТекущийОтступ + Отступ;
		КонецЦикла;
		
		ОтметкаЭлементаМассива = "- " + Сред(Отступ, 3);
		
		Для Каждого Элемент Из Значение Цикл
			
			Запись.ДобавитьСтроку(ТекущийОтступ + ОтметкаЭлементаМассива + ЗашифроватьYAML(Элемент, Отступ, Уровень + 1));
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Структура")
		Или ТипЗнч(Значение) = Тип("ФиксированнаяСтруктура")
		Или ТипЗнч(Значение) = Тип("Соответствие")
		Или ТипЗнч(Значение) = Тип("ФиксированноеСоответствие") Тогда
		
		ТекущийОтступ = "";
		Для й = 1 По Уровень Цикл
			ТекущийОтступ = ТекущийОтступ + Отступ;
		КонецЦикла;
		
		ПервыйКлюч = Истина;
		
		Для Каждого Элемент Из Значение Цикл
			
			Если ТипЗнч(Элемент.Значение) = Тип("Массив")
				Или ТипЗнч(Элемент.Значение) = Тип("Структура")
				Или ТипЗнч(Элемент.Значение) = Тип("Соответствие") Тогда
				Разделитель = ":" + Символы.ПС;
			Иначе
				Разделитель = ": ";
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Ключ) = Тип("Строка") Тогда
				
				Текст = Элемент.Ключ;
				
			Иначе
				
				Текст = "? " + ЗашифроватьYAML(Элемент.Ключ, Отступ, Уровень + 1) + "
					|" + ТекущийОтступ;
				
			КонецЕсли;
			
			Текст = Текст + Разделитель + ЗашифроватьYAML(Элемент.Значение, Отступ, Уровень + 1, Истина);
			
			Если Не ПервыйКлюч Или СНовойСтроки Тогда
				Текст = ТекущийОтступ + Текст;
			КонецЕсли;
			
			Если ПервыйКлюч Тогда
				ПервыйКлюч = Ложь;
			КонецЕсли;
			
			Запись.ДобавитьСтроку(Текст);
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Запись.ДобавитьСтроку(СтрЗаменить(Формат(Значение, "ДФ='yyyy-MM-ddTHH:mm:ss'"), "T00:00:00", ""));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Запись.ДобавитьСтроку(Формат(Значение, "ЧРД=.; ЧН=; ЧГ="));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Запись.ДобавитьСтроку(?(Значение = Истина, "true", "false"));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		Запись.ДобавитьСтроку(ЗашифроватьYAML(ТаблицаВМассивСтруктур(Значение), Отступ, Уровень));
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(Значение);
		
		Если Текст.КоличествоСтрок() > 1 Тогда
			
			Запись.ДобавитьСтроку("|");
			
			ТекущийОтступ = "";
			Для й = 1 По Уровень Цикл
				ТекущийОтступ = ТекущийОтступ + Отступ;
			КонецЦикла;
			
			Для й = 1 По Текст.КоличествоСтрок() Цикл
				Запись.ДобавитьСтроку(ТекущийОтступ + Отступ + Текст.ПолучитьСтроку(й));
			КонецЦикла;
			
		Иначе
			
			Если Значение = "true"
				Или Значение = "false"
				Или ЭтоСтроковоеПредставлениеЧисла(Значение) Тогда
				Запись.ДобавитьСтроку("""" + Значение + """");
			Иначе
				Запись.ДобавитьСтроку(Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Запись.ДобавитьСтроку(ЗашифроватьYAML(Строка(Значение)));
		
	КонецЕсли;
	
	СтрокаYAML = Запись.ПолучитьТекст();
	
	Возврат СтрокаYAML;
	
КонецФункции

Функция ТаблицаВМассивСтруктур(Знач Таблица)
	
	Массив = Новый Массив;
	
	КлючиСтруктуры = Новый Массив;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		КлючиСтруктуры.Добавить(Колонка.Имя);
	КонецЦикла;
	
	КлючиСтруктуры = СтрСоединить(КЛючиСтруктуры, ",");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Структура = Новый Структура(КлючиСтруктуры);
		ЗаполнитьЗначенияСвойств(Структура, СтрокаТаблицы);
		Массив.Добавить(Структура);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

Функция ЭтоСтроковоеПредставлениеЧисла(Знач Строка)
	
	Попытка
		Число = Число(Строка);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Main();
